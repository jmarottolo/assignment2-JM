t(aes(x = x, y = y)) +
xlim(0, 5) + ylim(0, 5)
cov(d)
rot_mat = matrix(nrow = 2, ncol = 2,
byrow = T,
data = c(cos(pi/6), sin(pi/6),
-sin(pi/6), cos(pi/6))
)
d2 = d %>% as.matrix() %*% t(rot_mat) %>% as_tibble() %>%
rename(x = V1, y = V2)
d2 %>% ggplot() + geom_point(aes(x = x, y = y)) +
xlim(0, 5) + ylim(0, 5)
cov(d2)
d %>% ggplott(aes(x = x, y = y)) +
xlim(0, 5) + ylim(0, 5)
d %>% ggplott(aes(x = x, y = y)) +
xlim(0, 5) + ylim(0, 5)
d %>% ggplot(aes(x = x, y = y)) +
xlim(0, 5) + ylim(0, 5)
d %>% ggplot(aes(x = x, y = y)) +
xlim(0, 4) + ylim(0, 4)
d %>% ggplot + geom_point(aes(x = x, y = y)) +
xlim(0, 4) + ylim(0, 4)
d %>% ggplot + geom_point(aes(x = x, y = y)) +
xlim(0, 5) + ylim(0, 5)
#Example 2 from notes (done in mathematica)
v1 = c(5, 1)
v2 = c(3, 2)
v3 = c(1, 4)
m = rbind(v1, v2, v3)
m
p = princomp(m)
str(p)
p$scores
m = matrix(data = c(1, 2, 2, 3, 4, 10), byrow=T, ncol=2)
m
p = princomp(m)
str(p)
p$scores
img = read_csv("~/Downloads/plane_shape_pixels.csv",
col_names = c("y", "x")) %>% select(x, y)
img %>% ggplot() + geom_point(aes(x = x, y = y)) +
coord_fixed()
library(readr)
library(dplyr)
library(ggplot2)
img = read_csv("~/Downloads/plane_shape_pixels.csv",
col_names = c("y", "x")) %>%
select(x, y)
img %>% ggplot() + geom_point(aes(x = x, y = y))
img = read_csv("~/Downloads/plane_shape_pixels(1).csv",
col_names = c("y", "x")) %>%
select(x, y)
img = read_csv("~/Downloads/plane_shape_pixels(1).csv",
col_names = c("y", "x")) %>%
select(x, y)
library(readr)
library(dplyr)
library(ggplot2)
img = read_csv("~/Downloads/plane_shape_pixels(1).csv",
col_names = c("y", "x")) %>%
select(x, y)
img = read_csv("/Users/jackmarottolo17/Downloads/plane_shape_pixels (1).csv",
col_names = c("y", "x")) %>%
select(x, y)
img %>% ggplot() + geom_point(aes(x = x, y = y))
cov(img)
p = princomp(img)
p$scores %>%
as_tibble() %>%
rename(x = `Comp.1`, y = `Comp.2`) %>%
ggplot() + geom_point(aes(x = x, y = y))
names(p)
p$loadings
cov(p$scores)
ev = eigen(img_cov)
img_cov=cov(img)
ev = eigen(img_cov)
ev$vectors
unclass(p$loadings)
d = read_csv("/Users/jackmarottolo17/Downloads/fp_nes08.csv")
library(tidyr)
d2 = d %>% mutate(id = row_number()) %>%
pivot_longer(cols = starts_with("v")) %>%
group_by(id) %>%
mutate(min_value = min(value)) %>%
ungroup() %>%
filter(min_value > 0) %>%
select(-min_value) %>%
pivot_wider(id_cols = id, names_from = "name",
values_from = "value")
install.packages("tidyr")
library(tidyr)
d2 = d %>% mutate(id = row_number()) %>%
pivot_longer(cols = starts_with("v")) %>%
group_by(id) %>%
mutate(min_value = min(value)) %>%
ungroup() %>%
filter(min_value > 0) %>%
select(-min_value) %>%
pivot_wider(id_cols = id, names_from = "name",
values_from = "value")
data_mat = d2 %>% select(-id)
p = princomp(data_mat, fix_sign = T)
p$loadings
d2 = d %>% mutate(id = row_number()) %>%
pivot_longer(cols = starts_with("v"),
names_to = "name",
values_to = "value")%>%
group_by(id) %>%
mutate(min_value = min(value)) %>%
ungroup() %>%
filter(min_value > 0) %>%
select(-min_value) %>%
pivot_wider(id_cols = id, names_from = "name",
values_from = "value")
anes_data = d2 %>% select(-id)
anes_p = princomp(anes_data)
anes_p$loadings
A = cbind(c(4,7,-1,8), c(-5,-2,4,2), c(-1,3,-3,6))
A
A_svd = svd(A)
A_svd
library(ggplot2)
library(dplyr)
x = c(-1.03, 0.74, -0.02, 0.51, -1.31,
0.99, 0.69, -0.12, -0.72, 1.11)
y = c(-2.23, 1.61, -0.02, 0.88, -2.39,
2.02, 1.62, -0.35, -1.67, 2.46)
d = tibble(x, y)
d %>% ggplot() +
geom_point(aes(x = x, y = y)) +
xlim(-2, 2) + ylim(-5, 5)
X = cbind(1,x)
Y = matrix(y, ncol = 1)
X
Y
XxX = t(X) %*% X
XxY = t(X) %*% Y
beta = solve (XxX) XxY
beta = solve (XxX) %*% XxY
beta
library(readr)
df1 = read_csv("~/Downloads/img1_keypoints.csv",
col_names=c("x", "y")) %>%
mutate(h = 1) %>%
select(x, y, h)
m1 = df1 %>% as.matrix()
X = matrix(nrow = nrow(df1)*2, ncol = 6)
zero_vector = rep(0, times=3)
for (i in 1:nrow(m1)) {
r = 2 * i - 1
X[r, ] = c(m1[i, ], zero_vector)
X[r + 1, ] = c(zero_vector, m1[i, ])
}
df2 = read_csv("~/Downloads/img2_keypoints.csv",
col_names=c("x", "y")) %>%
select(x, y)
## check that the unfolding of the matrix was done correctly
Y = df2 %>% as.matrix() %>% t() %>% as.vector()
df2 %>% head(3)
Y[1:6]
XxX = t(X) %*% X
XxY = t(X) %*% Y
beta = solve(XxX) %*% XxY
beta
XtX = t(X) %*% X
XtY = t(X) %*% Y
beta = solve(XtX) %*% XtY
beta
XtX = t(X) %*% X
XtY = t(X) %*% Y
beta = solve (XtX) %*% XtY
beta
#Problem 4
library(readr)
library(dplyr)
d = read_csv("2024_football_d3_scores.csv")
d = read_csv("/Users/jackmarottolo17/Downloads/2024_football_d3_scores.csv")
colnames(d)
View(df1)
head(d)
library(igraph)
d2 = d %>% filter(confName_away == 'NESCAC',
confName_home == 'NESCAC') %>%
select(loser, winner)
g = graph_from_data_frame(d = d2, directed=T)
plot(g)
r = eigen_centrality(g)
r$vector
m = as_adjacency_matrix(g, sparse=F)
m
eig = eigen(T)
first_vector = eig$vectors[, 1]
# Normalize the vector (optional, but good for interpreting)
first_vector = Re(first_vector / sum(first_vector))
# Match to team names
names(first_vector) = rownames(T)
print(first_vector[order(-first_vector)])  # highest to lowest rank
# Create full adjacency matrix
A = as_adjacency_matrix(g, sparse = FALSE)
# Transition matrix: transpose, then normalize by column sums
T = t(A)
T = sweep(T, 2, colSums(T), FUN = "/")
T[is.na(T)] = 0  # replace NaNs from divide-by-zero
eig = eigen(T)
first_vector = eig$vectors[, 1]
# Normalize the vector (optional, but good for interpreting)
first_vector = Re(first_vector / sum(first_vector))
# Match to team names
names(first_vector) = rownames(T)
print(first_vector[order(-first_vector)])  # highest to lowest rank
img = matrix(nrow = 25, ncol = 15, data = 1)
img[6:20, 3:12] = 0
img[9:17, 6:10] = 1
image(img, useRaster=F)
cov_mat = cov(img)
eig_vals = eigen(cov_mat)$values
eig_vals
non_zero = sum(eig_vals > 1e-6)
cat("Number of non-zero eigenvalues:", non_zero, "\n")
non_zero
.
archive_path = "~/Downloads/archive"
library(pixmap)
install.packages("pixmap")
library(pixmap)
library(stringi)
library(dplyr)
library(ggplot2)
flist = list.files(path = archive_path,
pattern = "pgm$",
recursive = T,
full.names=T)
flist[1:2]
flist[1:2]
sample_index = sample(x = 1:length(flist), size = 300, replace=F)
sample_index = sample(x = 1:length(flist), size = 300, replace=T)
sample_index = sample(x = 1:length(flist), size = 300)
flist = list.files(path = archive_path,
pattern = "pgm$",
recursive = T,
full.names=T)
flist[1:2]
flist[1:10]
sample_index = sample(x = 1:length(flist),
size = 300,
replace=F)
flist_sample = flist[sample_index]
View(df1)
load("/Users/jackmarottolo17/Desktop/Vectors Work /qac220_s25_midterm.RData")
View(mbball)
knitr::opts_chunk$set(echo = TRUE)
mbball %>% head()
get_emb = function(x, size=3072, api_key) {
require("httr")
if (is.null(x) | !is.character(x)) {
warning("You need to provide a text string to the embedding model")
return(NULL)
}
if (is.null(api_key) | !is.character(api_key)) {
warning("Please provide a Google Gemini API key")
return(NULL)
}
url = paste0("https://generativelanguage.googleapis.com/v1beta/models/gemini-embedding-exp-03-07:embedContent?key=",
api_key)
data = list(
model = "models/gemini-embedding-exp-03-07",
outputDimensionality = size,
content = list(
parts = list(
list(text = x)
)
)
)
s = POST(url, body = data,
encode = 'json')
if (status_code(s) == 200) {
d = httr::content(s, as='parsed')
return(unlist(d$embedding$values))
} else {
warning("Status code was not 200")
cat(httr::content(s, as="text"))
return(NULL)
}
}
##normalize v
u = runif(n=10)
u
v = matrix.power(T, 50) %*% u
url = "https://docs.google.com/spreadsheets/d/1kG3L759NLImR7UcDre90kUcITqiz71fYAYxIunlC8UE/edit?usp=sharing"
library(googlesheets4)
gs4_deauth()
u = read_sheet(url)
View(V)
d = read_sheet(url)
d2 = d %>% filter(!student %in% c('s18', 's23'))
View(d)
d = read_sheet(url)
d2 = d %>% filter(!student %in% c('s18', 's23'))
V = d2 %>% select(-student) %>% as.matrix()
gs4_deauth()
d = read_sheet(url)
d2 = d %>% filter(!student %in% c('s18', 's23'))
V = d2 %>% select(-student) %>% as.matrix()
V[is.na(V)] = 0
View(V)
d2 = d %>% filter(student %in% c('s18', 's23'))
V = d2 %>% select(-student) %>% as.matrix()
V[is.na(V)] = 0
View(V)
d2 = d %>% filter($student %in% c('s18', 's23'))
load(https://www.kaggle.com/datasets/sidraaazam/graduate-employability-dataset/data)
myData<- read.csv(https://www.kaggle.com/datasets/sidraaazam/graduate-employability-dataset/data)
library(readr)
myData<- read.csv(https://www.kaggle.com/datasets/sidraaazam/graduate-employability-dataset/data)
myData<- read_csv(https://www.kaggle.com/datasets/sidraaazam/graduate-employability-dataset/data)
myData<- read_csv(https:/www.kaggle.com/datasets/sidraaazam/graduate-employability-dataset/data)
myData<- read_csv(/Users/jackmarottolo17/Desktop/CollegePlacement.csv)
myData<- read_csv(Users/jackmarottolo17/Desktop/CollegePlacement.csv)
library(readr)
myData<- read.csv("(https://www.kaggle.com/datasets/sidraaazam/graduate-employability-dataset/data")
myData<- read.csv("/Users/jackmarottolo17/Desktop/CollegePlacement.csv")
myData<- read.csv("/Users/jackmarottolo17/Desktop/stat consulting work/CollegePlacement.csv")
myData
library(readr)
library(readr)
myData<- read.csv("/Users/jackmarottolo17/Desktop/stat consulting work/CollegePlacement.csv")
myData
View(myData)
summary(IQ)
summary("IQ")
summary(myData$IQ)
summary(myData$Communication_Skills)
#Communication Skills is a variable measured on a scale from 0-10. The avergae communication skills score among students
#is 5.5, with students having a low score of 1 and a high score of 10.
summary(myData$Internship_Experience)
#Communication Skills is a variable measured on a scale from 0-10. The avergae communication skills score among students
#is 5.5, with students having a low score of 1 and a high score of 10.
frequency(myData$Internship_Experience)
#Communication Skills is a variable measured on a scale from 0-10. The avergae communication skills score among students
#is 5.5, with students having a low score of 1 and a high score of 10.
table(myData$Internship_Experience)
table(myData$Placement)
summary(myData$Prev_Sem_Result)
library(ggplot2)
View(myData)
# Graphical Exploration
ggplot(
(data=myData)+geom_point(aes(x=IQ, y=CGPA))+ geom_smooth(aes(x=IQ, y=CGPA), method="lm"))
# Graphical Exploration
ggplot(myData, aes(x = IQ, y = CGPA)) +
geom_point(color = "steelblue", size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Relationship Between IQ and CGPA",
x = "IQ",
y = "College GPA (CGPA)"
) +
theme_minimal()
myAnovaResults1 <- aov(CGPA ~ Placement, data = myData)
summary(myAnovaResults1)
TukeyHSD(myAnovaResults1)
my.logreg <- glm(Placement ~ CGPA, data = myData, family = "binomial")
myData$NewPlacement[myData$Placement=="Yes"]<-1
myData$NewPlacement[myData$Placement=="No"]<-0
my.logreg <- glm(NewPlacement ~ CGPA, data = myData, family = "binomial")
summary(my.logreg)  # for p-values
exp(my.logreg$coefficients)  # for odds ratios
exp(confint(my.logreg))  # for confidence intervals on the odds ratios
install.packages("rvest")
library(rvest)
url<-"https://wesleyan0.sharepoint.com/:x:/r/sites/QAC380-01-Spring-2021/_layouts/15/Doc.aspx?sourcedoc=%7BEEDFD802-6EB7-4D0E-A4A2-FFE5F8670EBC%7D&file=FileMaker_SexualHealth_Form_Clean.xlsx&action=default&mobileredirect=true"
webpage<-read_html(url)
install.packages("readxl")
library(readxl)
sexual_health <- read_xlsx("/Volumes/qac380/Data and Codebooks/RIPHI/Data/FileMaker Data/FileMaker_SexualHealth_Form_Clean.xlsx")
View(sexual_health)
sexual_health_data <- read_xlsx("/Volumes/qac380/Data and Codebooks/RIPHI/Data/FileMaker Data/FileMaker_SexualHealth_Form_Clean.xlsx")
annual_intake_data <- read_xlsx("/Volumes/qac380/Data and Codebooks/RIPHI/Data/FileMaker Data/FileMaker_AnnualIntake_Form_Clean.xlsx")
sexual_health_data <- read_xlsx("/Volumes/qac380/Data and Codebooks/RIPHI/Data/FileMaker Data/FileMaker_SexualHealth_Form_Clean.xlsx")
demographics_data <- read_xlsx("/Volumes/qac380/Data and Codebooks/RIPHI/Data/FileMaker Data/FileMaker_Demographics_Form_Clean.xlsx")
View(annual_intake_data)
View(demographics_data)
library(readxl)
sexual_health_data <- read_xlsx("/Volumes/qac380/Data and Codebooks/RIPHI/Data/FileMaker Data/FileMaker_SexualHealth_Form_Clean.xlsx")
annual_intake_data <- read_xlsx("/Volumes/qac380/Data and Codebooks/RIPHI/Data/FileMaker Data/FileMaker_AnnualIntake_Form_Clean.xlsx")
demographics_data <- read_xlsx("/Volumes/qac380/Data and Codebooks/RIPHI/Data/FileMaker Data/FileMaker_Demographics_Form_Clean.xlsx")
View(annual_intake_data)
library(readxl)
sexual_health_data <- read_xlsx("/Volumes/qac380/Data and Codebooks/RIPHI/Data/FileMaker Data/FileMaker_SexualHealth_Form_Clean.xlsx")
annual_intake_data <- read_xlsx("/Volumes/qac380/Data and Codebooks/RIPHI/Data/FileMaker Data/FileMaker_AnnualIntake_Form_Clean.xlsx")
demographics_data <- read_xlsx("/Volumes/qac380/Data and Codebooks/RIPHI/Data/FileMaker Data/FileMaker_Demographics_Form_Clean.xlsx")
annual_intake_data$Patient_ReasonForVisit[annual_intake_data$`Patient_ReasonForVisit_Behavioral Health Visit`=="Checked"]<-"Behavioral Health"
annual_intake_data$Patient_ReasonForVisit <- "Unknown"
View(annual_intake_data)
library(dplyr)
library(descr)
install.packages("dplyr")
install.packages("descr")
library(dplyr)
library(descr)
annual_intake_data$Patient_ReasonForVisit <- "Unknown"
library(readxl)
library(dplyr)
library(descr)
sexual_health_data <- read_xlsx("/Volumes/qac380/Data and Codebooks/RIPHI/Data/FileMaker Data/FileMaker_SexualHealth_Form_Clean.xlsx")
annual_intake_data <- read_xlsx("/Volumes/qac380/Data and Codebooks/RIPHI/Data/FileMaker Data/FileMaker_AnnualIntake_Form_Clean.xlsx")
demographics_data <- read_xlsx("/Volumes/qac380/Data and Codebooks/RIPHI/Data/FileMaker Data/FileMaker_Demographics_Form_Clean.xlsx")
annual_intake_data$Patient_ReasonForVisit <- "Unknown"
annual_intake_data$Patient_ReasonForVisit[annual_intake_data$`Patient_ReasonForVisit_Behavioral Health Visit`=="Checked"]<-"Behavioral Health"
annual_intake_data$Patient_ReasonForVisit <- "Unknown"
annual_intake_data$Patient_ReasonForVisit[annual_intake_data$`Patient_ReasonForVisit_Behavioral Health Visit`=="Checked"]<-"Behavioral Health"
annual_intake_data$Patient_ReasonForVisit[annual_intake_data$`Patient_ReasonForVisit_Primary Care`=="Checked"]<-"Primary Care"
annual_intake_data$Patient_ReasonForVisit[annual_intake_data$`Patient_ReasonForVisit_Hepatitis C Care`=="Checked"]<-"Hep C Care"
annual_intake_data$Patient_ReasonForVisit[annual_intake_data$`Patient_ReasonForVisit_Gender Care`=="Checked"]<-"Gender Care"
annual_intake_data$Patient_ReasonForVisit[annual_intake_data$`Patient_ReasonForVisit_Labwork (including COVID-19 testing)`=="Checked"]<-"Labwork"
annual_intake_data$Patient_ReasonForVisit[annual_intake_data$`Patient_ReasonForVisit_STI Testing`=="Checked"]<-"STI Testing"
annual_intake_data$Patient_ReasonForVisit[annual_intake_data$Patient_ReasonForVisit_Vaccine=="Checked"]<-"Vaccine"
annual_intake_data$Patient_ReasonForVisit[annual_intake_data$Patient_ReasonForVisit_PrEP=="Checked"]<-"PrEP"
annual_intake_data$Patient_ReasonForVisit[annual_intake_data$`Patient_ReasonForVisit_STI Treatment`=="Checked"]<-"STI Treatment"
annual_intake_data$Patient_ReasonForVisit[annual_intake_data$Patient_ReasonForVisit_Procedure=="Checked"]<-"Procedure"
annual_intake_data$Patient_ReasonForVisit[annual_intake_data$`Patient_ReasonForVisit_HIV Care`=="Checked"]<-"HIV Care"
annual_intake_data$Patient_ReasonForVisit[annual_intake_data$Patient_ReasonForVisit_Injection=="Checked"]<-"Injection"
annual_intake_data$Patient_ReasonForVisit[annual_intake_data$`Patient_ReasonForVisit_Sick Visit`=="Checked"]<-"Sick Visit"
freq(Patient_ReasonForVisit)
table(Patient_ReasonForVisit)
annual_intake_data$Patient_ReasonForVisit[annual_intake_data$Patient_ReasonForVisit_Other!="NA"]<-"Other"
myData <- read.csv(/Users/jackmarottolo17/Documents/GitHub/assignment2-JM/penguins.csv)
myData <- read.csv("/Users/jackmarottolo17/Documents/GitHub/assignment2-JM/penguins.csv")
View(myData)
View(myData)
install.packages("ggplot2")
library(dplyr)
library(ggplot2)
summary_species <- myData %>%
group_by(species) %>%
summarise(
mean_bill_length_mm = mean(bill_length_mm, na.rm = TRUE),
mean_bill_depth_mm = mean(bill_depth_mm, na.rm = TRUE),
mean_flipper_length_mm = mean(flipper_length_mm, na.rm = TRUE),
mean_body_mass_g = mean(body_mass_g, na.rm = TRUE)
count = n()
summary_species <- myData %>%
group_by(species) %>%
summarise(
mean_bill_length_mm = mean(bill_length_mm, na.rm = TRUE),
mean_bill_depth_mm = mean(bill_depth_mm, na.rm = TRUE),
mean_flipper_length_mm = mean(flipper_length_mm, na.rm = TRUE),
mean_body_mass_g = mean(body_mass_g, na.rm = TRUE)
)
View(summary_species)
# save summary table as a .csv file
write.csv(summary_species, "summary_species.csv", row.names = FALSE)
body_mass_plot <- ggplot(myData, aes(x = bill_length_mm,
y = body_mass_g,
color = species)) +
geom_point() + labs (title = "Body Mass vs. Bill Length by Species",
x = "Bill Length (mm)",
y = "Body Mass (g)") + theme_minimal()
body_mass_plot <- ggplot(myData, aes(x = bill_length_mm,
y = body_mass_g,
color = species)) +
geom_point() + labs (title = "Body Mass vs. Bill Length by Species",
x = "Bill Length (mm)",
y = "Body Mass (g)") + theme_minimal()
ggsave("bodymass_billlength_plot.png", plot = mass_plot, width = 5, height = 4, dpi = 300)
ggsave("bodymass_billlength_plot.png", plot = body_mass_plot, width = 5, height = 4, dpi = 300)
myData <- read.csv("/Users/jackmarottolo17/Documents/GitHub/assignment2-JM/penguins.csv")
library(dplyr)
library(ggplot2)
### SUMMARY STATISTICS BY SPECIES ###
summary_species <- myData %>%
group_by(species) %>%
summarise(
mean_bill_length_mm = mean(bill_length_mm, na.rm = TRUE),
mean_bill_depth_mm = mean(bill_depth_mm, na.rm = TRUE),
mean_flipper_length_mm = mean(flipper_length_mm, na.rm = TRUE),
mean_body_mass_g = mean(body_mass_g, na.rm = TRUE)
)
# save summary table as a .csv file
write.csv(summary_species, "summary_species.csv", row.names = FALSE)
### PLOTTING BODY MASS ON BILL LENGTH BY SPECIES ###
body_mass_plot <- ggplot(myData, aes(x = bill_length_mm,
y = body_mass_g,
color = species)) +
geom_point() + labs (title = "Body Mass vs. Bill Length by Species",
x = "Bill Length (mm)",
y = "Body Mass (g)") + theme_minimal()
#save the plot
ggsave("bodymass_billlength_plot.png", plot = body_mass_plot, width = 5, height = 4, dpi = 300)
setwd("/Users/jackmarottolo17/Documents/GitHub/assignment2-JM")
myData <- read.csv("/Users/jackmarottolo17/Documents/GitHub/assignment2-JM/penguins.csv")
library(dplyr)
library(ggplot2)
summary_species <- myData %>%
group_by(species) %>%
summarise(
mean_bill_length_mm = mean(bill_length_mm, na.rm = TRUE),
mean_bill_depth_mm = mean(bill_depth_mm, na.rm = TRUE),
mean_flipper_length_mm = mean(flipper_length_mm, na.rm = TRUE),
mean_body_mass_g = mean(body_mass_g, na.rm = TRUE)
)
# save summary table as a .csv file
write.csv(summary_species, "summary_species.csv", row.names = FALSE)
body_mass_plot <- ggplot(myData, aes(x = bill_length_mm,
y = body_mass_g,
color = species)) +
geom_point() + labs (title = "Body Mass vs. Bill Length by Species",
x = "Bill Length (mm)",
y = "Body Mass (g)") + theme_minimal()
ggsave("bodymass_billlength_plot.png", plot = body_mass_plot, width = 5, height = 4, dpi = 300)
